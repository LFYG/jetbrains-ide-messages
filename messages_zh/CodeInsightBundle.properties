error.hint.file.is.readonly=文件{0}是只读的
error.dialog.readonly.file.title=文件是只读的
error.dialog.readonly.files.title=无法修改只读文件
error.dialog.readonly.files.message={0}包含只读文件,处理其他可写文件?
reformat.directory.dialog.options=选项
reformat.directory.dialog.filters=过滤器
process.scope.directory=目录 ''{0}''
process.scope.project=项目 ''{0}''
process.scope.module=模块 ''{0}''
process.scope.changed.files=只处理 VCS 更改的文件
reformat.code.accept.button.text=运行
process.scope.file=文件{0} (&F)
reformat.option.selected.text=选中文本 (&S)
reformat.option.all.files.in.directory=目录内所有文件{0} (&A)
reformat.option.include.subdirectories=包含子目录 (&I)
reformat.option.optimize.imports=优化导入 (&O)
reformat.option.rearrange.entries=重新排序条目 (&R)
reformat.option.vcs.changed.region=仅VCS改变的文本 (&V)
reformat.progress.file.with.known.name.text=格式化中{0}
reformat.and.optimize.progress.common.text=准备导入...
reformat.progress.common.text=格式化代码...
configure.code.style.on.fragment.dialog.title=调整代码样式设置
configure.code.style.on.fragment.dialog.cancel=跳过
configure.code.style.on.fragment.dialog.progress.text=影响选定代码片段的过滤设置…
configure.code.style.on.fragment.dialog.progress.text.under=按“跳过”显示所有设置
process.optimize.imports=优化导入
process.optimize.imports.before.commit=提交前优化导入
progress.text.optimizing.imports=优化导入...
progress.reformat.and.optimize.common.command.text=格式化并优化导入
progress.reformat.stage.wrapping.blocks=准备中...
progress.reformat.stage.processing.blocks=计算更改...
progress.reformat.stage.applying.changes=存储变更...
progress.reformat.stage.expanding.children.indents=扩大必要的子项缩进
process.rearrange.code=重新编码…
process.reformat.code=重新格式化代码
process.reformat.code.before.commit=提交前格式化代码
process.rearrange.code.before.commit=收到的Rearrange双赢的守则
dialog.reformat.files.title=格式文件
dialog.reformat.files.optimize.imports.checkbox=优化导入 (&O)
dialog.reformat.files.reformat.selected.files.label=格式化选中的文件?
command.name.typing=输入
dialog.import.on.paste.title=选择要导入的类
dialog.import.on.paste.title2=选择要导入的元素
dialog.paste.on.import.text=<html>你所粘贴的代码片段使用的是不是在新的形势下，可以通过导入类。<br/>选择类，您要导入到新文件。</html>
dialog.paste.on.import.text2=<html>你所粘贴的代码片段使用，是不是在新的上下文访问的导入元件。<br/>选择元素，你想导入到新文件。</html>
paste.data.flavor.folding=折叠数据
paste.dataflavor.referencedata=参考数据
generate.constructor.fields.chooser.title=选择字段以便构造器初始化
error.attempt.to.generate.constructor.for.anonymous.class=不能添加构造函数到匿名类
generate.constructor.super.constructor.chooser.title=选择超级类构造器
generate.delegate.method.chooser.title=选择的方法来生成代表名额
generate.delegate.target.chooser.title=选择目标生成的代表
generate.equals.and.hashcode.already.defined.warning=除它们,继续吗?
generate.equals.and.hashcode.already.defined.warning.anonymous=方法的布尔equals(对象)\"和\"int hashCode()\"已经definedfor这个匿名类.你想删除它们,继续吗?
generate.equals.and.hashcode.already.defined.title=生成equals()和hashCode()
generate.equals.and.hashcode.error.no.object.class.message=无法生成equals()和hashCode()。未找到java.lang.Object类。
generate.equals.and.hashcode.error.no.object.class.title=没有java.lang.Object
generate.equals.compare.nested.arrays.comment=//比较嵌套数组——{0}这里的价值观
generate.equals.compare.arrays.comment=//可能的错误——比较对象[]数组和数组等于
generate.getter.setter.title=选择字段生成getter和setter
generate.getter.fields.chooser.title=选择字段生成getter
generate.setter.fields.chooser.title=选择字段生成setter
generate.setter.template=&Setter template:
generate.getter.template=&Getter template:
override.implement.broken.file.template.message=请正确\"覆盖/实现方法主体\"模板
override.implement.broken.file.template.title=文件模板错误
methods.to.implement.chooser.title=选择实现的方法
methods.to.override.chooser.title=选择要重写的方法
methods.to.override.implement.chooser.title=选择覆盖/实施的方法
generate.list.popup.title=生成
surround.with.cast.template=((Type)expr)
surround.with.dowhile.template=do / while
surround.with.for.template=for
surround.with.ifelse.expression.template=if (expr) {...} else {...}
surround.with.ifelse.template=if / else
surround.with.if.expression.template=if (expr) {...}
surround.with.if.template=if
surround.with.not.instanceof.template=!(表达式实例类型)
surround.with.not.template=!(表达式)
surround.with.parenthesis.template=(expr)
surround.with.runnable.template=Runnable
surround.with.synchronized.template=同步
surround.with.try.catch.finally.template=try / catch / finally
surround.with.try.catch.template=try / catch
surround.with.try.catch.incorrect.template.message=无效的文件模板,用于catch body
surround.with.try.catch.incorrect.template.title=环绕用try-catch
surround.with.try.finally.template=try / finally
surround.with.while.template=while
surround.with.runtime.type.template=((RuntimeType)expr)
surround.with.chooser.title=环绕用
unwrap.popup.title=选择开启/移除的声明
unwrap.if=开启 'if...'
unwrap.else=开启 'else...'
remove.else=移除 'else...'
unwrap.while=开启 'while...'
unwrap.for=开启 'for...'
unwrap.braces=开启 braces
unwrap.try=开启 'try...'
unwrap.conditional=开启 'f ? a : b'
remove.catch=移除 'catch...'
unwrap.array.initializer=开启数组初始值设定项
unwrap.synchronized=开启 'synchronized...'
unwrap.with.placeholder=开启 ''{0}''
unwrap.anonymous=开启 'anonymous...'
unwrap.lambda=Unwrap 'lambda...'
generate.equals.hashcode.wizard.title=生成equals()和hashCode()
generate.equals.hashcode.equals.fields.chooser.title=选择要被包含在equals()中的字段(f)\r (&F)
generate.equals.hashcode.hashcode.fields.chooser.title=选择要被包含在hashCode()中的字段(f)\r (&F)
generate.equals.hashcode.non.null.fields.chooser.title=选择所有非空字段 (&F)
generate.equals.hashcode.use.getters=在代码生成过程中使用 &getters
generate.equals.hashcode.template=&Template:
generate.equals.hashcode.accept.sublcasses=接受子类作为参数equals()方法(
generate.equals.hashcode.accept.sublcasses.explanation=<html><body>Object.equals() 不符合接受范围内<br>子类可能需要生成方法的正确工作<br>在框架中, 它生成的代理子类如Hibernate。</body></html>
generate.equals.hashcode.internal.error=内部错误
generate.equals.warning.equals.for.nested.arrays.not.supported=equals()不支持嵌套的数组
generate.equals.warning.generated.equals.could.be.incorrect=生成的Object[]的equals()可能不正确
generate.equals.hashcode.warning.hashcode.for.arrays.is.not.supported=hashCode()不支持数组
highlight.thrown.exceptions.chooser.all.entry=所有列出的
highlight.exceptions.thrown.chooser.title=选择异常类以高亮显示
highlight.exceptions.thrown.notfound=没有在该方法抛出的异常发现
status.bar.exit.points.highlighted.message={0}exit {0, choice, 1#point|2#points} 高亮的 (按{1}再次移除高亮显示, 取消移除所有高亮)
status.bar.highlighted.usages.message={0}{0, choice, 1#usage|2#usages} 由{1}找到 (按 {2} 再次移除高亮显示, 取消移除所有高亮)
status.bar.highlighted.usages.no.target.message={0}{0, choice, 1#usage|2#usages} 找到 (按 {2} 再次移除高亮显示, 取消移除所有高亮)
status.bar.overridden.methods.highlighted.message={0}overridden {0, choice, 1#method|2#methods} 找到 (按{1}再次移除高亮显示, 取消移除所有高亮)
status.bar.highlighted.usages.not.found.message={0}发现没有用途
status.bar.highlighted.usages.not.found.no.target.message=未找到用法
parameter.info.no.parameters=<无参数>
xml.tag.info.no.attributes=<无属性>
n.of.m={0} of {1}
quick.definition.back=后退
quick.definition.forward=前进
quick.definition.edit.source=编辑源代码
quick.definition.show.source=显示源代码
i18n.quickfix.property.panel.title=属性信息
i18n.quickfix.property.panel.update.all.files.in.bundle.checkbox=更新资源包中的所有属性文件(R)\r (&R)
i18n.quickfix.property.panel.properties.file.label=属性文件:(&P)
i18n.quickfix.property.panel.property.value.label=属性值:(&V)
i18n.quickfix.property.panel.property.key.label=属性键:(&K)
i18n.quickfix.code.panel.title=Java代码信息
i18n.quickfix.code.panel.resource.bundle.expression.label=资源绑定表达式:(&E)
i18n.quickfix.preview.panel.title=预览
quickfix.i18n.concatentation=I18nize字符串连接包含硬编码字符串
quickfix.i18n.concatentation.error=字符串连接没有找到
quickfix.i18n.command.name=I18nize
inspection.i18n.display.name=硬编码字符串
inspection.i18n.option.ignore.assert=忽略断言语句参数
inspection.i18n.option.ignore.for.exception.constructor.arguments=忽略异常构造函数参数:
inspection.i18n.option.ignore.for.specified.exception.constructor.arguments=忽视对指定的异常构造函数参数
inspection.i18n.option.ignore.for.junit.assert.arguments=忽视对JUnit断言参数
inspection.i18n.option.ignore.qualified.class.names=忽略文字具有价值等于现有的完全限定类名
inspection.i18n.option.ignore.property.keys=忽略文字具有价值等于现有的属性键
inspection.i18n.option.ignore.nonalphanumerics=忽略文字不包含字母字符
inspection.i18n.quickfix=I18nize硬编码字符串
inspection.i18n.message.general.with.value=硬编码字符串:{0}
inspection.unresolved.property.key.reference.name=无效属性健
inspection.unresolved.property.key.reference.message=字符串文字\"{0}\"不似乎是有效的属性键
inspection.invalid.resource.bundle.reference=无效的资源束参考\"{0}\"
i18nize.dialog.title=I18nize硬编码字符
i18nize.dialog.error.jdk.message=找不到类'java.util.ResourceBundle'。请正确安装JDK 。
i18nize.dialog.error.jdk.title=类未找到
i18nize.dialog.property.file.chooser.title=选择属性文件
i18nize.dialog.template.link.label=编辑I18n模板
i18nize.dialog.error.property.already.defined.message=属性''{0}''已经在文件''{1}''中存在
i18nize.dialog.error.property.already.defined.title=属性已经存在
intention.split.declaration.family=拆分声明
intention.join.declaration.family=加入宣言和赋值
intention.split.declaration.text=拆分为分开的声明
intention.join.declaration.text=加入宣言和赋值
intention.split.declaration.assignment.text=拆分为声明和赋值
intention.split.if.family=分裂如果
intention.split.if.text=分成2如果的
intention.split.filter.text=拆分为过滤器链
intention.split.filter.family=拆分过滤器
intention.merge.filter.text=合并过滤器链
intention.merge.filter.family=合并过滤器
intention.introduce.variable.text=引入局部变量
intention.encapsulate.field.text=封装领域
intention.implement.abstract.method.family=实现抽象方法
intention.implement.abstract.method.text=实现方法 ''{0}''
intention.override.method.text=重写方法 ''{0}''
intention.add.annotation.family=添加注释
intention.add.on.demand.static.import.family=对需求添加静态导入
intention.add.on.demand.static.import.text=对需求添加静态导入\"{0}\"
intention.add.single.member.static.import.family=添加单一静态导入
intention.add.single.member.static.import.text=添加静态导入\"{0}\"
intention.add.single.member.import.text=添加导入\"{0}\"
intention.replace.concatenation.with.formatted.output.family=更换连接与格式化输出
intention.replace.concatenation.with.formatted.output.text=用'java.text.MessageFormat.format()'替换'+'
intention.color.chooser.dialog=选择颜色
intention.convert.to.basic.latin=转换为基本的拉丁
intention.surround.resource.with.ARM.block=环绕用try-with-resources
intention.surround.with.ARM.block.template=try-with-resources
dialog.create.field.from.parameter.title=创建字段
dialog.create.field.from.parameter.already.exists.text=使用现有字段\"{0}\"？
dialog.create.field.from.parameter.already.exists.title=字段已经存在
dialog.create.field.from.parameter.field.type.label=字段的类型:
dialog.create.field.from.parameter.field.name.label=名称:
dialog.create.field.from.parameter.declare.final.checkbox=声明final (&F)
dialog.create.class.destination.package.label=目标包：
dialog.create.class.package.chooser.title=选择目标包
create.directory.command=创建目录
dialog.create.class.label=创建{0}:
dialog.create.class.name=创建{0}{1}
intention.implement.abstract.class.family=实现抽象类或接口
intention.implement.abstract.class.default.text=实现抽象类
intention.implement.abstract.class.interface.text=实现接口
intention.implement.abstract.class.subclass.text=创建子类
intention.error.cannot.create.class.message=无法创建类\"{0}\"
intention.error.cannot.create.class.title=创建类失败
intention.assign.field.from.parameter.text=分配参数字段\"{0}\"
intention.assign.field.from.parameter.family=分配参数场
intention.create.field.from.parameter.text=创建字段参数\"{0}\"
intention.create.field.from.parameter.family=创建字段参数
intention.bind.fields.from.parameters.text={0}参数绑定到字段
intention.bind.fields.from.parameters.family=绑定参数字段
intention.implement.abstract.method.searching.for.descendants.progress=寻找的后代...
intention.implement.abstract.method.error.no.classes.message=没有发现这类方法可以实现
intention.implement.abstract.method.error.no.classes.title=没有找到的类
intention.implement.abstract.method.class.chooser.title=选择实现类
intention.implement.abstract.method.command.name=实现方法
intention.invert.if.condition=转化如果条件
intention.extract.if.condition.text=提取if({0})
intention.extract.if.condition.family=提取if条件
intention.underscores.in.literals.family=凸显了在数字字面值
intention.remove.literal.underscores=移除下划线文字
intention.insert.literal.underscores=插入到文字的下划线
intention.replace.cast.with.var.text=用\"{1}\"替换\"{0}\"
intention.replace.cast.with.var.family=用变量替换转换
intention.convert.color.representation.text=转换为\"新颜色{0}\"
intention.convert.color.representation.family=转换颜色表示
intention.break.string.on.line.breaks.text=打破字符串 '\\n'


intention.create.test=创建测试
intention.create.test.dialog.testing.library=测试库:
intention.create.test.dialog.language=语言:
intention.create.test.dialog.class.name=类名：
intention.create.test.dialog.super.class=超类:
intention.create.test.dialog.choose.super.class=选择超类
intention.create.test.dialog.generate=生成:
intention.create.test.dialog.show.inherited=显示继承的方法
intention.create.test.dialog.setUp=set&Up/@Before
intention.create.test.dialog.tearDown=tear&Down/@After
intention.create.test.dialog.select.methods=生成的测试方法:
intention.create.test.dialog.library.not.found={0}库在该模块中未找到
intention.create.test.dialog.fix.library=修复
intention.create.test.dialog.java=Java

lightbulb.tooltip=单击或按{0}
dialog.intention.settings.intention.list.title=意向名单
dialog.intention.settings.description.panel.title=描述
dialog.intention.settings.description.usage.example.title=使用例子
intention.settings=意图
intention.settings.category.text=<html><body><center>您所选择的意图类别 ''<b>{0}</b>''。</center>通过点击复选框，您可以启用/禁用所有此意图类别。要启用/禁用特定意图，选择这一类别里面的意图。</body></html>
templates.postfix.settings.category.text=<font face=\"verdana\" size=\"-1\">您所选择的后缀完成语言。<br>通过点击复选框，您可以启用/禁用所有后缀的模板语言。<br>要启用/禁用在后缀模板组中选择它。<br></font></body></html>
templates.postfix.settings.category.before=示例代码中选择模板将显示在这里。现货现货显示闪烁的矩形意图适用的地方。
templates.postfix.settings.category.after=后缀完成调用的结果将显示在这里。
javadoc.description.copied.from.interface=描述复制从接口:
javadoc.description.copied.from.class=描述复制从类:
javadoc.deprecated=过时的
javadoc.since=自从:
javadoc.see.also=请参阅:
javadoc.parameters=参数:
javadoc.returns=返回:
javadoc.throws=抛出：
javadoc.method.in.interface={0}在界面{1}里面
javadoc.method.in.class={0}在类{1}里边
javadoc.method.overrides=重写:
javadoc.method.specified.by=指定的:
javadoc.external.fetch.error.message=无法获取远程文件:{0}
searching.for.implementations=寻找实现...

goto.implementation.chooserTitle=<html><body>选择<b>{0}</b>的实施方法 ({1} found)</body></html>
goto.implementation.findUsages.title={0}的实现
goto.implementation.notFound=没有实现发现

goto.test.chooserTitle.test=<html><body>选择<b>{0}</b>测试({1}发现)</body></html>
goto.test.findUsages.test.title=测试为{0}
goto.test.chooserTitle.subject=<html><body>选择<b>{0}</b>的测试主题({1}发现)</body></html>
goto.test.findUsages.subject.title=测试对象为{0}
goto.test.notFound=没有测试对象发现

incremental.search.tooltip.prefix=搜索：
goto.super.property.chooser.title=Choose super property
goto.super.method.chooser.title=选择父类方法
goto.super.method.of.chooser.title=Choose Super Method of {0}
goto.super.method.findUsages.title={0}的超级方法
goto.super.class.chooser.title=选择父类或接口
javadoc.action.back=向后
javadoc.action.forward=向前
javadoc.action.view.external=查看外部文档
javadoc.documentation.not.found.message=对于这个元素的文档是没有找到.请添加所有需要的路径到API文档在项目设置.
javadoc.documentation.not.found.title=没有文档
javadoc.fetching.progress=读取文档...
no.documentation.found=没有发现文档.
javadoc.constructor.candidates=<html>新的候选 <b>{0}</b>() 是:<br>{1}</html>
javadoc.candidates=<html>候选方法调用 <b>{0}</b> 是:<br><br>{1}</html>
javadoc.candidates.not.found=<html>没有候选人发现方法调用<b>{0}</b>.</html>
declaration.navigation.title=选择声明
template.shortcut.enter=确定
template.shortcut.tab=选项卡
template.shortcut.space=空格
template.shortcut.custom=Custom
dialog.edit.live.template.title=编辑活动模板
dialog.add.live.template.title=添加活动模板
templates.no.defined=没有模板定义在这个上下文
templates.surround.no.defined=在此上下文环境，还没有定义环绕模板。
templates.settings.page.title=活动模板
templates.select.template.chooser.title=选择模版
templates.dialog.edit.variables.title=编辑模板变量
templates.dialog.edit.variables.border.title=变量
templates.dialog.edit.variables.action.move.up=上移 (&U)
templates.dialog.edit.variables.action.move.down=下移 (&D)
templates.dialog.edit.variables.table.column.name=名称
templates.dialog.edit.variables.table.column.expression=表达式
templates.dialog.edit.variables.table.column.default.value=默认值
templates.dialog.edit.variables.table.column.skip.if.defined=跳过如果定义
templates.dialog.table.column.abbreviation=缩写
templates.dialog.table.column.description=描述
templates.dialog.table.column.active=活跃
templates.dialog.shortcut.chooser.label=默认展开与
dialog.copy.live.template.title=复制活动模板
dialog.edit.template.shortcut.default=默认({0})
dialog.edit.template.template.text.title=模板文本:(&T)
dialog.edit.template.button.edit.variables=编辑变量 (&E)
dialog.edit.template.label.abbreviation=缩写: (&A)
dialog.edit.template.label.group=组: (&G)
dialog.edit.template.label.description=描述: (&D)
dialog.edit.template.options.title=选项
dialog.edit.template.label.expand.with=展开与 (&X)
dialog.edit.template.checkbox.reformat.according.to.style=根据风格重新格式化(&R)
dialog.edit.template.checkbox.shorten.fq.names=缩短浆名称(
dialog.edit.template.checkbox.use.static.import=如果可能，使用静态导入(i)\r (&I)
dialog.edit.template.context.title=上下文
dialog.edit.template.checkbox.html=HTML (&H)
dialog.edit.template.checkbox.xml=XML (&X)
dialog.edit.template.checkbox.jsp=JSP (&P)
dialog.edit.template.checkbox.smart.type.completion=智能类型完成(o)\r (&O)
dialog.edit.template.error.title=无法保存
dialog.edit.template.error.malformed.abbreviation=不能保存模板.模板缩写应该只包含字母,数字和连字符,点.
dialog.edit.template.error.already.exists=不能保存模板.模板与缩写\"{0}\"已经存在于集团\"{1}\".请选择一个不同的缩写或组.
finish.template.command=完成模板
insert.code.template.command=插入代码模板
template.next.variable.command=转到下一个代码模板选项卡
template.previous.variable.command=转到上一个代码模板选项卡
macro.array.variable=arrayVariable()
macro.capitalize.string=capitalize(String)
macro.cast.to.left.side.type=castToLeftSideType()
macro.classname=类名()
macro.component.type.of.array=componentTypeOf(Array)
macro.current.package=currentPackage()
macro.decapitalize.string=decapitalize(String)
macro.firstWord.string=firstWord(String)
macro.undescoresToSpaces.string=underscoresToSpaces(String)
macro.undescoresToCamelCase.string=underscoresToCamelCase(String)
macro.capitalizeAndUnderscore.string=capitalizeAndUnderscore(String)
macro.descendant.classes.enum=descendantClassesEnum(String)
macro.enum=枚举(...)
macro.expected.type=expectedType()
macro.groovy.script=groovyScript(\"groovy code\")
macro.guess.element.type.of.container=guessElementType(Container)
macro.expression.type=expressionType(Expression)
macro.iterable.component.type=iterableComponentType(ArrayOrIterable)
macro.iterable.variable=iterableVariable()
macro.linenumber=lineNumber()
macro.methodname=methodName()
macro.method.parameters=methodParameters()
macro.qualified.class.name=qualifiedClassName()
macro.right.side.type=rightSideType()
macro.suggest.index.name=suggestIndexName()
macro.suggest.variable.name=suggestVariableName()
macro.suggest.first.variable.name=suggestFirstVariableName()
macro.variable.of.type=variableOfType(Type)
macro.file.name=fileName()
macro.file.name.without.extension=fileNameWithoutExtension()
command.name.surround.with.runtime.cast=环绕用运行时转换
inspection.i18n.expression.is.invalid.error.message=I18nized表达式模板的不是一个有效的表达式
inspection.error.dialog.title=错误
livetemplate.description.tag.pair=一对标签
livetemplate.description.itar=遍历数组元素
livetemplate.description.itco=遍历java.util.Collection元素
livetemplate.description.iten=迭代java util枚举
livetemplate.description.itit=迭代java util迭代器
livetemplate.description.itli=遍历java.util.List元素
livetemplate.description.ittok=迭代标记从字符串
livetemplate.description.itve=遍历java.util.Vector元素
livetemplate.description.ritar=反序遍历数组元素
livetemplate.description.iter=迭代数组在J2SDK Iterable | 5.0语法
livetemplate.description.itover=遍历一个数组选择J2SDK Iterable或在5.0语法
livetemplate.description.inst=检查对象类型和运算符和下投下它
livetemplate.description.lst=获取数组的最后一个元素
livetemplate.description.mn=集较小值给一个变量
livetemplate.description.mx=设置变量更大的价值
livetemplate.description.psvm=main() 方法声明
livetemplate.description.toar=存储元素的java跑龙套.收集到数组
livetemplate.description.lazy=执行延迟初始化
livetemplate.description.if.not.null=插入''if not null''语句
livetemplate.description.if.null=插入''if null''语句
livetemplate.description.geti=插入单例方法getInstance
livetemplate.description.serr=打印一个字符串到System.err
livetemplate.description.sout=打印一个字符串到System.out
livetemplate.description.souf=打印一个格式化字符串到System.out
livetemplate.description.soutm=打印当前的类名和方法名到System.out
livetemplate.description.soutp=打印方法参数的名称和值到System.out
livetemplate.description.soutv=打印一个值System.out
livetemplate.description.st=字符串
livetemplate.description.psf=公共静态最终
livetemplate.description.psfi=公共静态最终int
livetemplate.description.psfs=公共静态最终字符串
livetemplate.description.thr=throw new
livetemplate.description.surround.braces=环绕用{}
livetemplate.description.surround.parens=环绕用()
livetemplate.description.surround.tag=环绕用<标签></标签>
livetemplate.description.surround.tag.in.htmlorjsp=环绕用<标签></标签>在HTML/JSP
livetemplate.description.surround.cdata.in.xmlorhtmlorjsp=环绕用CDATA
livetemplate.description.surround.with.callable=环绕用Callable
livetemplate.description.surround.with.read.lock=环绕用ReadWriteLock.readLock
livetemplate.description.surround.with.write.lock=环绕用ReadWriteLock.writeLock
quickfix.add.variable.text=初始化变量 ''{0}''
quickfix.add.variable.family.name=初始化变量
inspection.i18n.quickfix.annotate.as=注释为 @{0}
inspection.i18n.quickfix.annotate.element.as=注释{0} ''{1}'' 为 @{2}
disable.intention.action=禁用''{0}''
enable.intention.action=启用''{0}''
under.construction.string=在构造器下
inspection.i18n.option.ignore.comment.pattern=忽略线路包含该评论(模式在java跑龙套.模式格式):
inspection.i18n.option.ignore.comment.title=非nls评论模式
inspection.i18n.option.ignore.assigned.to.constants=忽略文字分配常数
inspection.i18n.option.ignore.tostring=忽略toString()方法的内容
intention.move.initializer.to.constructor=移动到构造函数初始化器
intention.move.initializer.to.set.up=初始化设置移动方法
intention.move.field.assignment.to.declaration=移动指派到字段声明
i18nize.jsp.error=请选择JSP文本i18nize。\n确保你没有选择任何脚本，自定义标签或其它语言元素。\n同时，HTML标签里面选择必须是平衡的。
i18nize.error.title=不能I18nize选择
i18nize.error.message=你只能i18nize Java字符串或者子串之.请点插入符号在Java字符串或选择它的一部分.
display.coverage.prompt=您要显示覆盖率数据\"{0}\"吗？
code.coverage=代码覆盖率
coverage.button.add.package=添加包
coverage.pattern.filter.editor.choose.package.title=选择包
no.coverage=没有覆盖
code.coverage.is.not.supported=代码覆盖率支持jre 5.0或更高
title.popup.show.coverage=覆盖率套房
prompt.remove.coverage=你要删除\"{0}\"覆盖率数据吗?
title.remove.coverage.data=移除覆盖率数据
coverage.data.outdated=覆盖率数据已过期
coverage.data.not.found=未找到覆盖率数据
error.cannot.resolve.class=无法解析类''{0}''
implementation.view.title={0}的定义
javadoc.info.title=文档为{0}
intention.intercept.ejb.method.or.class.family=添加EJB拦截器
intention.intercept.ejb.method.or.class.class.text=添加拦截器对EJB类\"{0}\"
intention.intercept.ejb.method.or.class.method.text=对业务方法添加拦截\"{0}\"
intention.edit.interceptor.binding.family=拦截器绑定
intention.edit.interceptor.binding.text=编辑拦截\"{0}\"绑定
powered.by=启动by
powered.by.plugin=''{0}''插件.
error.cannot.convert.default.message=无效的值:''{0}''
error.cannot.resolve.default.message=无法解析符号''{0}''
error.cannot.resolve.0.1=无法解析{0} { 1 }
unknown.encoding.0=Unknown encoding: ''{0}''
error.unknown.enum.value.message=未知的枚举值''{0}''
i18nize.cant.create.properties.file.because.its.name.is.associated=不能创建属性文件\"{0}\",因为它的名字是相关的{1}.
i18nize.error.creating.properties.file=错误创建属性文件
node.method.tooltip=方法
node.field.tooltip=字段
node.annotation.tooltip=注释
node.anonymous.class.tooltip=匿名类
node.enum.tooltip=枚举
node.exception.tooltip=异常
node.interface.tooltip=接口
node.junit.test.tooltip=JUnit测试
node.runnable.class.tooltip=Runnable类
node.class.tooltip=类
node.excluded.flag.tooltip=排除
node.abstract.flag.tooltip=抽象的
node.final.flag.tooltip=最后的
node.static.flag.tooltip=静态
multiple.implementations.tooltip=多个实现
static.class.initializer={0}类初始化器

# suppress inspection "UnusedProperty"
intentions.category.ejb=EJB
set.language.level=设置语言级别
set.language.level.to.0=设置语言级别为{0}
remove.annotation=移除注释
deannotate.intention.action.text=Deannotate
deannotate.intention.chooser.title=选择要删除的注释
javadoc.type.parameters=类型参数:
highlight.overridden.classes.chooser.title=从...选择高亮重写方法的类
no.methods.overriding.0.are.found=没有重写方法 {0, 选择, 0#|1# '{1}'|2#these classes} 被发现
copy.abstract.method.no.existing.implementations.found=没有找到现有的实现
copy.abstract.method.intention.name=使用现有实现''{0}''
copy.abstract.method.popup.title=选择要复制的实现
copy.abstract.method.title=使用抽象方法实现
i18nize.empty.file.path=请指定属性的文件路径
choose.type.popup.title=选择类型
cast.expression=强制转换表达式
cast.to.0=转换为''{0}''
class.completion.file.path=按{0}再次搜索所有匹配的项目文件
class.completion.file.path.all.variants=按{0}搜索匹配任何类型的文件
property.has.more.parameters.than.passed=属性\"{0}\"预期的{1}{1,选择,1
create.file.family=创建文件
rename.file.reference.family=重命名参考文件
rename.file.reference.text=重命名文件引用到{0}
create.directory.text=创建目录{0}
create.file.text=创建文件{0}
create.tagfile.text=创建标记文件{0}
rename.file.fix=重命名文件
rename.element.family=重命名元素
rename.public.class.text=将类''{0}''重命名为''{1}''
rename.named.element.text=将''{0}''重命名为''{1}''
dialog.edit.template.checkbox.html.text=HTML文本
dialog.edit.template.checkbox.xsl.text=XSL文本
highlight.imported.classes.chooser.title=选择导入高亮的类
highlight.imported.members.chooser.title=选择导入高亮的成员
javadoc.resolved.value=解析值\:
javadoc.error.resolving.url=无法解析 URL <i>{0}</i> <p>配置路径的API文档在 <a href="open://Project Settings">项目设置</a>中可能有帮助

inlay.hints.show.settings=Add Method ''{0}'' to Blacklist...
inlay.hints.show.settings.description=Open parameter name hints settings
inlay.hints.blacklist.method=Do not show hints for current method
inlay.hints.blacklist.method.description=Adds current method to parameter name hints blacklist
inlay.hints.intention.family.name=Parameter Name Hints
inlay.hints.enable.action.text=Enable Parameter Name Hints
inlay.hints.disable.action.text=Disable Parameter Name Hints
